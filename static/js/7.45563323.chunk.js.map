{"version":3,"sources":["ui-component/cards/MainCard.js","ui-component/LineChart.js","ui-component/Choropleth/index.js","views/gtrends/index.js"],"names":["headerSX","mr","MainCard","React","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","borderColor","palette","primary","action","variant","className","LineChart","width","height","chartType","loader","data","options","hAxis","vAxis","rootProps","ChoroplethMap","dataset","onlyValues","this","props","map","obj","minValue","Math","min","apply","maxValue","max","paletteScale","d3","scale","linear","domain","range","forEach","item","iso","value","numberOfThings","fillColor","Datamap","element","document","getElementById","scope","geographyConfig","popupOnHover","highlightOnHover","highlightBorderWidth","borderWidth","dataJson","CanadaJson","popupTemplate","geo","properties","name","join","fills","HIGH","LOW","MEDIUM","UNKNOWN","defaultFill","setProjection","projection","mercator","center","translate","offsetWidth","offsetHeight","path","id","style","Component","Gtrends","Typography","Choropleth"],"mappings":"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","file":"static/js/7.45563323.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\n// material-ui\nimport { useTheme } from '@material-ui/styles';\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@material-ui/core';\n\n// constant\nconst headerSX = {\n    '& .MuiCardHeader-action': { mr: 0 }\n};\n\n//-----------------------|| CUSTOM MAIN CARD ||-----------------------//\n\nconst MainCard = React.forwardRef(\n    (\n        {\n            border = true,\n            boxShadow,\n            children,\n            content = true,\n            contentClass,\n            contentSX,\n            darkTitle,\n            secondary,\n            shadow,\n            sx = {},\n            title,\n            ...others\n        },\n        ref\n    ) => {\n        const theme = useTheme();\n\n        return (\n            <Card\n                ref={ref}\n                {...others}\n                sx={{\n                    border: border ? '1px solid' : 'none',\n                    borderColor: theme.palette.primary[200] + 75,\n                    ':hover': {\n                        boxShadow: boxShadow ? (shadow ? shadow : '0 2px 14px 0 rgb(32 40 45 / 8%)') : 'inherit'\n                    },\n                    ...sx\n                }}\n            >\n                {/* card header and action */}\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\n                {darkTitle && title && (\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\n                )}\n\n                {/* content & header divider */}\n                {title && <Divider />}\n\n                {/* card content */}\n                {content && (\n                    <CardContent sx={contentSX} className={contentClass}>\n                        {children}\n                    </CardContent>\n                )}\n                {!content && children}\n            </Card>\n        );\n    }\n);\n\nMainCard.propTypes = {\n    border: PropTypes.bool,\n    boxShadow: PropTypes.bool,\n    children: PropTypes.node,\n    content: PropTypes.bool,\n    contentClass: PropTypes.string,\n    contentSX: PropTypes.object,\n    darkTitle: PropTypes.bool,\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n    shadow: PropTypes.string,\n    sx: PropTypes.object,\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\n};\n\nexport default MainCard;\n","import { Chart } from 'react-google-charts';\n\nexport default function LineChart() {\n    return (\n        <Chart\n            width={'600px'}\n            height={'400px'}\n            chartType=\"LineChart\"\n            loader={<div>Loading Chart</div>}\n            data={[\n                ['x', 'dogs'],\n                [0, 0],\n                [1, 10],\n                [2, 23],\n                [3, 17],\n                [4, 18],\n                [5, 9],\n                [6, 11],\n                [7, 27],\n                [8, 33],\n                [9, 40],\n                [10, 32],\n                [11, 35]\n            ]}\n            options={{\n                hAxis: {\n                    title: 'Time'\n                },\n                vAxis: {\n                    title: 'Popularity'\n                }\n            }}\n            rootProps={{ 'data-testid': '1' }}\n        />\n    );\n}\n","import React, { Component } from 'react';\nimport Datamap from 'datamaps/dist/datamaps.world.min.js';\nimport d3 from 'd3';\nimport CanadaJson from './Canada.topo.json';\n\nclass ChoroplethMap extends Component {\n    componentDidMount() {\n        // Datamaps expect data in format:\n        // { \"USA\": { \"fillColor\": \"#42a844\", numberOfWhatever: 75},\n        //   \"FRA\": { \"fillColor\": \"#8dc386\", numberOfWhatever: 43 } }\n        let dataset = {};\n\n        // We need to colorize every country based on \"numberOfWhatever\"\n        // colors should be uniq for every value.\n        // For this purpose we create palette(using min/max this.props.data-value)\n        let onlyValues = this.props.data.map(function (obj) {\n            return obj[1];\n        });\n        let minValue = Math.min.apply(null, onlyValues),\n            maxValue = Math.max.apply(null, onlyValues);\n\n        // create color palette function\n        // color can be whatever you wish\n        let paletteScale = d3.scale.linear().domain([minValue, maxValue]).range(['#EFEFFF', '#02386F']); // blue color\n\n        // fill dataset in appropriate format\n        this.props.data.forEach(function (item) {\n            //\n            // item example value [\"USA\", 70]\n            let iso = item[0],\n                value = item[1];\n            dataset[iso] = { numberOfThings: value, fillColor: paletteScale(value) };\n        });\n\n        let map = new Datamap({\n            element: document.getElementById('cloropleth_map'),\n            scope: 'brasil',\n            geographyConfig: {\n                popupOnHover: true,\n                highlightOnHover: true,\n                borderColor: '#444',\n                highlightBorderWidth: 1,\n                borderWidth: 0.5,\n                dataJson: CanadaJson,\n                popupTemplate: function (geo, data) {\n                    // don't show tooltip if country don't present in dataset\n                    if (!data) {\n                        return;\n                    }\n                    // tooltip content\n                    return [\n                        '<div class=\"hoverinfo\">',\n                        '<strong>',\n                        geo.properties.name,\n                        '</strong>',\n                        '<br>Count: <strong>',\n                        data.numberOfThings,\n                        '</strong>',\n                        '</div>'\n                    ].join('');\n                }\n            },\n            fills: {\n                HIGH: '#afafaf',\n                LOW: '#123456',\n                MEDIUM: 'blue',\n                UNKNOWN: 'rgb(0,0,0)',\n                defaultFill: '#eee'\n            },\n            data: dataset,\n            setProjection: function (element) {\n                var projection = d3.geo\n                    .mercator()\n                    .center([-10.2062807, -55.4165359]) // always in [East Latitude, North Longitude]\n                    .scale(200)\n                    .translate([element.offsetWidth / 2, element.offsetHeight / 2]);\n\n                var path = d3.geo.path().projection(projection);\n                return { path: path, projection: projection };\n            }\n        });\n    }\n    render() {\n        return (\n            <div\n                id=\"cloropleth_map\"\n                style={{\n                    height: '100%',\n                    width: '100%'\n                }}\n            ></div>\n        );\n    }\n}\n\nexport default ChoroplethMap;\n","import React from 'react';\n\n// material-ui\nimport { Typography } from '@material-ui/core';\n\n// project imports\nimport MainCard from '../../ui-component/cards/MainCard';\nimport LineChart from '../../ui-component/LineChart';\nimport ChoroplethMap from '../../ui-component/Choropleth';\n\n//==============================|| SAMPLE PAGE ||==============================//\n\nconst Gtrends = () => {\n    const data = [\n        ['GO', 32],\n        ['SP', 10],\n        ['PE', 10],\n        ['AC', 10],\n        ['AM', 10],\n        ['MA', 65],\n        ['PA', 10],\n        ['RO', 10],\n        ['TO', 10],\n        ['DF', 34],\n        ['MS', 10],\n        ['MG', 10],\n        ['MT', 10],\n        ['RS', 52],\n        ['PR', 10],\n        ['SC', 10],\n        ['CE', 10],\n        ['PI', 10],\n        ['AL', 10],\n        ['BA', 10],\n        ['ES', 10],\n        ['PB', 10],\n        ['RJ', 10],\n        ['RN', 10],\n        ['SE', 10],\n        ['RR', 10],\n        ['AP', 10]\n    ];\n    // [\"MB\", 75], [\"SK\", 43], [\"AB\", 50], [\"BC\", 88], [\"NU\", 21], [\"NT\", 43],\n    // [\"YT\", 21], [\"ON\", 19], [\"QC\", 60], [\"NB\", 4], [\"NS\", 44], [\"NF\", 38],\n    // [\"PE\", 67]];\n\n    return (\n        <MainCard title=\"Gtrends\">\n            <Typography variant=\"body2\">\n                Lorem ipsum dolor sit amen, consenter nipissing eli, sed do elusion tempos incident ut laborers et doolie magna alissa. Ut\n                enif ad minim venice, quin nostrum exercitation illampu laborings nisi ut liquid ex ea commons construal. Duos aube grue\n                dolor in reprehended in voltage veil esse colum doolie eu fujian bulla parian. Exceptive sin ocean cuspidate non president,\n                sunk in culpa qui officiate descent molls anim id est labours.\n            </Typography>\n\n            <div\n                style={{\n                    height: '100vh',\n                    width: '100vw'\n                }}\n            >\n                <ChoroplethMap data={data} />\n            </div>\n\n            <LineChart />\n        </MainCard>\n    );\n};\n\nexport default Gtrends;\n"],"sourceRoot":""}